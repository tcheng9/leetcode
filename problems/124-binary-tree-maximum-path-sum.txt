I. Conceptual Solution
-----------------------------------------------
Conceptual solution:
1. Write a DFS function that can figure out the max value on a root split
(max of left and right path)
2. From this funciton, you can add your curent node to
-> this deals with if the current node is negative -> "would a negative value in the path help you get the max value"
ie path is [root = -1, left = 2, right = 3] the sum of those values with a NEGATIVE NUMBER is bigger than the indiviudal positive nodes

3. Once there is a split, you can calculate the path of root + left + right (assuming no splits further down because 2 splits doesn't end up being a vaid path)


In summary: You have to calculate 3 different types of graph paths which makes it tricky

II. Implementation
-----------------------------------------------




III. Code solutions
-----------------------------------------------
Code solution:

res = [root.val]
#return max path sum without split
def dfs(root):
    if not root:
        return 0
    leftMax = dfs(root.left)
    rightMax = dfs(root.right)

    leftMax = max(leftMax, 0)
    rightMax = max(rightMax, 0) #don't have to take left or right child nodes

    #compute max path sum WITH split
    res[0] = max(res[0], root.val + leftMax + rightMax)     
    
    #reutrn max path WITHOUT a split (to keep path valid) for a future split
    return root.val + max(leftMax, rightMax)
dfs(root)
return res[0]

IV. Summary
-----------------------------------------------