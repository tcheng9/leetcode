Conceptual solution 1:
1. compare start and end letters -> 2 pointer solution


Questions: 
1. How to check for alphanumeric characters?
ANSWER: for alpabetic characters, you can use ord()
for numeric characters, you can 
2. how to make value lowercase? 
ANSWER: str.lower() -> make the whole string lowercase
3. How to skip non-alphanumeric numbers?
if the letter is not within the lowercase bounds OR numbers bound, l or r +1




Edgecases:
1. all lowercase
2. all uppercase
3. all numbers
4. all non-alphanumeric values
5. No values -> palindrome or not a palindrome?

Steps:
1. init left pointer
2. init right pointer
3. while l < r THEN check condition
4. if it is a number or or lowercase, check if ord(l) == ord(r)
5. if l or r is not within the bounds THEN you skip l or r + 1
6. IF l != r:
    a. return false

7. if while loop terminates (l >r ):
    a. return true


    ALPHANUMERIC CHECK:
    
Improvmeent:
1. should have done a for loop to convert it into a single string of letters
2. 




Neetcode solution 1 (uses a lot of builtin functions):

newStr = ''
for c in s:
    if c .isalnum():
        newStr += c.lower()
    return newStr == newStr[::-1]

Things I learned:
1. str.lower() -> turns an entire string to lower case IGNORING symbols and numbers
NOTE: not in place, need to set to a new var
2. I should try to figure out the core parts of a solution then code the core piece by piece:
    
3. How to check for alphanumerical bounds?
4. str.isalnum() -> returns true if ALL chracters of the string are alphanumeric 
5. c.lower() -> converts all letters in a string to lowercase, IGNORES symbols/numbers
6. Slicing arrays -> [start:end] OR [start:end:step]
6a. STEP -> positive skip indices from start to end
    example: 
        a. arr = [1,2,3,4,5]
        b. arr[::2] -> [1,3,5]
    negative step example:
        a. arr = [1,2,3,4,5]
        b. arr[::-2] ->  [5,3,1] 
        c. CONCLUSION: negative step tells the array to go from start -> end but from the end of the array as the start

Con of soution: used extra memory within the problem (extra str, extra array)

============END of solution 1=============================================

Conceptual solution 2: 
idk I didn't watch the video, but i kinda am just gonna do it myself





How to ACTUALLY CODE the check for ascii?

if (ascii):
    do x,y,z
else (not ascii):
    l += 1












========================================================================
Conceptual solution 2:

Neetcode solution:

Things I learned:
1. Should have wrote a helper function for alphaNumeric check
neetcode checked via:
def alphaNum(self, c):
    return (ord('A' <= ord(c) <== ord('Z'))
    ord('a') <= ord(c) <= ord('z') or 
    ord('0') <= ord(c) <= ord('9'))

l,r = 0, len(s) -1

while l <r:
    while l <r and not alphaNum(s[l]):
        l += 1
    while (r > 1) and not alphaNum(s[r]):
        r += 1
    if (s[l].lower() != s[r].lower()):
        return false
    l, r = l +1, r-1
return true


Lingering questions: 
1. what is the time complexity of:
 for loop -with nested while loop?
 while loop with nested while loop

 Are either of these ever O(n^2)? Talking to kevin, it sounds like O(2n)