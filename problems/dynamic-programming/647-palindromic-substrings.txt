I. Explanation of solution
-----------------------------------------------

- even and odd length palindromes
- expand from left and right from the center to check if it is a palindrome


Brute force (O(n^3))
- for each letter, find all possible substrings (O(n^2))
- Then for each substing, check for a palindrome (O(n))




II. Explaining the recursive subproblme
-----------------------------------------------
- substrings are the recursive subproblem. 
- solution: use each letter as the center and recursively increase left and right bounds

III. Pseudocode
-----------------------------------------------
1. r, l = i, i #center letter

Even length string:
0. init i = 1
1. while l and r are in bounds and those corresponding letters equal to each other, expand outwards
2. l -= 1 and r += 1 to expand

Question: how to adjust pointers for even length strings?
"abba"
iter 0 i=0 and i = 0 -> 
you want i and i + 1 to check
-> conclusion: deal with even case later


iter 0 should be i i and then iter 1 should be i, i +1 then iter 2 should be i-1, i + 1
Odd length string:
1. while l and r are in bound and l and r are equal to each other expand outward
2. if string[left] and string[right] are equal, res += 1
3. l -= 1 and r += 1




IV. Code solutions
-----------------------------------------------
##Odd case solution:

if len(string) % 2 != 0:
    l,r = 0, 0
    for i in range(len(string)):
        while l >= 0 and r < len(string) and s[l] == s[r]:
            res += 1
            l-=1 
            r+= 1


##even case solution
if len(string) % 2 == 0:
    l, r = 0, 1
    for i in range(len(string)):
        while l >= 0 and r < len(string) and s[l] == s[r]:
            res += 1
             
            r+= 1

####my solution 2 after looking at neetcode's solution
#Note: i realized that you need to check for BOTH even AND odd solutions, not just even OR odd

res = 0
for i in range(len(s)):
    l,r = i,i
    while l >= 0 and r < len(string) and s[l] == s[r]:
            res += 1
            l-=1 
            r+= 1
    
    l,r = i,i+1
    while l >= 0 and r < len(string) and s[l] == s[r]:
            res += 1
            l-=1 
            r+= 1

return res



V. Summary
-----------------------------------------------
Takeaways:
Oh, This problem wants ALL POSSIBLE PALINDROMES - even or odd! 
It doesn't matter if the string is even or odd length, there are even length substrings in odd length strings you need to check!

-I was thinking that depending on IF the string is even or odd length, you do 1 of the 2 conditions
BUT actually, you gotta check for both!

This isn't a case where you find even OR odd length palindromes. You WANT both of them
SO it's actually find even AND odd length palindromes! 