I. Conceptual Solution
-----------------------------------------------
Neetcode doesn't start at the end of the array. 
he starts at the beginning of the array but uses that as the base case. 

ie
Array:                                 [1, 2, 3, 1]
Max you can rob at corresponding house [1, 2, 4, 3]
II. Explanation of the recursive subproblem
-----------------------------------------------
Each rob is its own recursive subproblem because each choice can be -> rob this house OR skip it and potentially rob the next one

Reducing space/memory used: 
1. Instead of storing an array, store 2 variables that get Ith position and (i-1) positions
III. Implementation
-----------------------------------------------

IV. Code solutions
-----------------------------------------------
rob1, rob2 = 0, 0

for n in nums:
    #n is a the jump (since you can't rob adjacent house)
    #ie arr = [1,2,3] rob1 = 1 rob2 = 2 and n = 3. You can choose 1 + 3 (aka rob1 + n) or 2 (rob2) due to the rules of the problem
    temp = max(n + rob1, rob2) 
return rob2



V. Summary
-----------------------------------------------
