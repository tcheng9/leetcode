I. Conceptual Solution
-----------------------------------------------
Brute force:
1. Check all substrings (O(n^2))
2. Check if palindrome (O(n))

Case to consider:
-palindromes of odd length
-palindromes of even length

Odd length:
1. Choose each letter to be the center. if center - 1 and center + 1 are the same letter then continue expanding outward and update the palindrome length (ie max(curr_palindrome_len, max_palindrome_len))


Even length:
1. You don't have a center. just use a left and right variable that keeps track of the left and right from each letter and see if thye are equal to each otherwise

Explanation of the recursive subproblem
-----------------------------------------------
-each character an be the middle of the palindrome

Odd length:
1. From each letter, do i + 1 and i -1 and check if they are equal
2. l is i-1
3. r is i +1

Even length:
1. From each letter, just do i and i+1 

Cases to check:
1. if l and r are in bounds (>= 0 and <len(arr))
2. if s[l] === s[r] -> the letters make avalid palindrome



III. Implementation
-----------------------------------------------


IV. Code solutions
-----------------------------------------------

res = ''
resLen = 0

for i in range(len(s)):
    #odd length
    l,r = i,i
    while l >= 0 and r < len(s) and s[l] == [s]:
        if (r - 1 + 1 > resLen):
            res = s[1:r+1]
            resLen = r - l + 1
        l -= 1
        r += 1



    #even length
    l, r = i, i + 1
    while l >= 0 and r < len(s) and s[l] === s[r]:
        if (r - l + 1 > resLen):
            res = s[l:r+1]
            resLen = r - l + 1
        l -= 1
        r += 1

return res


V. Summary
-----------------------------------------------
Questions:
1. How do you know if it's even or odd length OR are you checking both for each time?
A: Odd length palindromes will (?) be bigger than even length palindromes?
A: Alternatively, if I was to write this, I could handle this by a "len(s) % 2 == 0" check