I. Conceptual Solution
-----------------------------------------------
Unsure how to determine height balance. -> I would do DFS and match height_left == height_right

Q: what is height balanced?


Neetcode concpetual solution:
Bruite force:
1. From each node: check if their left and right subtree are balanced O(n^2)

Repeated work:
1. checking the balance -> OPTIMiZATION: check bottom up

Optimization work:
1. while you check for subtrees are balanced, return heights of tree currently



II. Implementation
-----------------------------------------------
My potential steps:
1. Track height
2. df(node)

DFS steps;
Base case:
1. if not node: -> return 0

Recursive operations:
2.. height += 1
left = dfs(nod.left)
right = dfs.node.right

-> 


Recursive call:
#it's "return (some conditoinal check)" -> dfs is done above, now I need to do calculatinos


---back in main fn---
if dfs(node.left) == dfs(node.right):
    return True
else:
    return False

III. Code solutions
-----------------------------------------------

My code:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        
       
        
        res = True
        count = 0
        def dfs(node):
            if not node:
                return 0

            

            left = dfs(node.left)
            right = dfs(node.right)

            if (left != right):
                return False
            return 1 + max(left,right)

        dfs(root)

        return True    



Neetcode solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def dfs(root):
            if not root:
                return [True, 0]

            left, right = dfs(root.left), dfs(root.right)
            balanced = left[0] and right[0] and abs(left[1] - right[1]) <= 1
            return [balanced, 1 + max(left[1], right[1])]

        return dfs(root)[0]


IV. Summary
-----------------------------------------------

Takeaways: 

a.ohhh in diameter of binary tree (543), I was stuck on why you can't do if (dfs(node.left), dfs(node.right))
-> it's because there's a difference between node.left and fn(node.left)
-> gotta refereesh my memory about why thos


b. Gotta get more comfortable figuring out the recursive call and the return value.
    -> need to get comfortable recursing an array/obj and as a result, recursing multiple values at the same time

