I. Conceptual Solution
-----------------------------------------------
2 facts to remember:
a. First value in preorder is always the root
b. First value in inorder is always the left node

Q: so what happens when you see an already visited node in the opposite list 
Every value of the left of the ROOT node (you have to find out from preorder) 
    -> is on the left side of the tree. Every value of the root node is on the right side
    -> SO YOU CAN PARTITION Preorder

Q: So from the partitions, how do you build the left side of the tree but further down it has a left and right child node?
A: Once you are done doing the traversal from the given 
node that splits left and right, preorder and inorder will be at the same index ->
as a result, you can use the ame methodology as above to identify:
    - the next BRANCH split from the inorder traversal (using the preorder traversal to identify the root node)
    - the 

Tricks to remember for tmrw:
1. Preorder provides the split
2. Inorder provides a left and right subtree at the split given in preorder
3. Figure out how to partition array properly to split left and right subtrees in the array
4. How do you split array properly -> need to check for off-by-1 errors


II. Implementation
-----------------------------------------------

Thigns to do: 
1. Construct nodes
2. Split preorder array
3. Split inorder array
4. dfs??
    i. Not sure if you need to dfs -> you def need to iterate over the array

Iterate over inorder array:
    1. Craft root node
    2. Find root node in preorder array
        i. Create left side of tree from [i : root] and right side from [root : end of array]
    3. dfs -> go down and create aall the left side nodes
        i. Return back up if Null node
    4.  dfs again on rigth side to create right side of tree

Quesitons:
Q1. How to slice visited nodes already? 
A1: Do arr[i: root node] and [root node : end_array]

Q2: 

DFS function:
1. 



III. Code solutions
-----------------------------------------------

My solution:
-> No clue how to Code

Neetcode solution:

#recursive algo

def buildTree(...):
    if not preorder or not inorder:
        return None

    root = TreeNode(preorder[0])
    ##Neetcode uses inorder.index(preorder[0]) -> BUT i'ma use a for loop since I've never seen index
    for i in inorder: 
        if inorder[i] == preorder[0]:
            match = preorder[0]
    root.left = self.buildTree(preorder[1: mid + 1], inorder[:mid]) #mid + 1 because it is end of array indexing is non-inclusive
    root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])

    



IV. Summary
-----------------------------------------------
Takeaways: 
1. What does array.index() do?