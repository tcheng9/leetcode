Conceptual solution:
    Note: Constraints:requires O(n) time + no division operation


Prefix/postfix product
Prefix -> each array indices' value is the mutliplcation of (n - 1)th and nth value 
Postfix -> each array indice's value but you go from nth -> 1

so to get total:
ex: you need 5th value, you get the prefix[4th value] + postfix[6th value] 

Edgecase: out of bounds needs to default to 1
Time: O(n)
Space: O(n)

Edgecases:
1. array of length of 1
2. array of the same value?
3. Negative values


Questions:
1. How to deal with out of bounds in the pre/postfix arrays?  
    Answer: when you do (i - 1) or (j -1) and the val == len(arr) or val == 0
2. 


Steps:
1. create pre/post/res arrays
2. Getting prefix array -> iterate through array and just multiply ith position - (i+1) position
array[i] = nums[i] * nums[i+1]

3. getting postix array -> iterate through array and multiply jth position - (j-1) position
array[j] = nums[j] * nums[j-1]


4. res array -> at res kth position, get prefix[k-1] * postfix[k+1] position t

res[k] = prefix[k-1] * postfix[k+1] 
return res
Edgecase: outof bounds


My solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        prefix = [1] * len(nums) 
        postfix = [1] * len(nums)

        res = []

        #Create prefix array
        for i in range(len(nums)):
            tmp = 1
            if (i +1 == len(nums)):
                tmp = 1
                prefix[i] = nums[i] * 1
            else:
                prefix[i] = nums[i] * nums[i+1]

        print(prefix)
        #create postfix array


        #create res array
        

--------Couldn't solve within 25 mins -----------------


Neetcode solution:
res = [1] * (len(nums))
prefix = 1

for i in range(len(nums)):
    res[i] = prefix
    prefix *= nums[i]

postfix = 1

for i in range(len(nums) -1, -1,-1)
    res[i] *= postfix
    postfix *= nums[i]

return res

Conclusion: a bit distraced today but confused about the implementation of neetcode's initiual solution
The solution code is an optimization but I need to get the semi-optimal solution first