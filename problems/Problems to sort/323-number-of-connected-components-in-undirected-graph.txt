I. Conceptual Solution
-----------------------------------------------
Conceptual solution 1 O(e+v):
1. create adjacency list and then do dfs
2. Union find


Learning about Union find (algo for finding disjoint graph sets):
-Disjoint set data structure supports
    1. adding new sets to the disjoint set
    2. Merging disjoint sets to a single disjoint set using Union operation
    3. Finding representative of a disjoint set using Find operation
    4. Check if 2 sets are disjoint or not

Algo template:
1, Initial setup:
    a. parent array -> (Ith parent is at parent_array[i])
    b. rank array -> (Jth position represnts Jth's amounto f node connections)

2. Find algo:
def find(i):
    if (parent[i] == i):
        return i
    else:
        return find(parent[i])

#summary: if Ith value's parent_array is its own position, return that ELSE find the the array's parent where that is the causes
parent_array = [0,1,2,3,4,5,5,5] 
find(3) -> return 3
find(7) -> returns 5


#Union algo:
def union(parent, rank, i, j):
    irep = find(parent,i)
    jrep = find(parent,j)
    parent[irep] = jrep

#Summary: find roots node of I and J nodes and connects j's parent be i's parent as well
ex: parent_array = [0,1,1,3,4,5,5,5] 
i = 2 
j = 3

union(2,3) - parent_array[i] = j -> parent of j becomes i's parent


#Union by rank:
1. Rank refers to height of the tree nodes
2. You can combined nodes based on which graph is taller

def unionbyrank(i,j):
    irep = find(i) #find parent of i
    jrep = find(j) #find parent of J

    if (irep == jrep):
        return #both are connected with the same parent already

    irank = rank[irep] -> get rank of I, initially set through an outer Rank array
    jrank = rank[jrep] -> get rank of J, initially set through an outer Rank array

    if (irank < jrank):
        parent_array[irep] = jrep #i gets updated to have J's parent
    else if (irank > jrank):
        parent_array[jrep] = irep #j gets updated to have I's parent
    else:
        parent_array[irep] = jrep #both values are equal so just pick Once
        rank[jrep]++

#union by size
Similar to union by rank but use size of tree instead
Size of tree refers to number of elements in the tree


II. Implementation
-----------------------------------------------


III. Code solutions
-----------------------------------------------




IV. Summary
-----------------------------------------------