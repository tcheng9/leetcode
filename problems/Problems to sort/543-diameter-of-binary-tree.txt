I. Conceptual Solution
-----------------------------------------------

To me, this problem is essentially getting max depth from the left or right of a node -> 
from there, pass that value up to any parent node. 
from there, see if the new calculated length beats the current length

II. Implementation
-----------------------------------------------
Steps:
1. Setup stuff outside recursive call
2. Write the DFS
3. return the result of the DFS I think


DFS steps:
1. Base case:
if (not node):
    return 0

2. Recursive operations:
    depth +=1
3. Recursive call:
    return max(dfs(node.left), dfs(node.right))



Think about a case /cases where a parent node will never increase the depth of a tree:
1. Calculate the max depth of EVERY NODE'S LEFT AND RIGHT CHILD -> IF THAT'S GREATER THAN THE GLOBAL MAX_TRACKER THEN INCREASE. 


2. How to calculate the total of length of children at ANY node (avoiding off by 1 errors)


III. Code solutions
-----------------------------------------------

my solution - didn't work
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        res = 0
        depth = 0
        def dfs(node, depth):
            if (not node):
                return 0
    
          

            depth_left = dfs(node.left, depth + 1)
            depth_right = dfs(node.right, depth + 1)

            if (depth_left + depth_right) > res:
                res = depth_left + depth_right

            return max(depth_left, depth_right)

        return dfs(root, 0)


IV. Summary
-----------------------------------------------

Takeaways: couldn't solve this error 'UnboundLocalError: cannot access local variable 'res' where it is not associated with a value
" -> also, very sleepy